DROP SEQUENCE F15B3_App_seq ; 
create sequence F15B3_App_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger F15B3_App_PK_trig 
before insert on F15B3_App
for each row 
begin 
select F15B3_App_seq.nextval into :new.app_id from dual; 
end; 
/
alter table F15B3_App add created date ; 
alter table F15B3_App add created_by VARCHAR2 (255) ; 
alter table F15B3_App add row_version_number integer ; 
alter table F15B3_App add updated date ; 
alter table F15B3_App add updated_by VARCHAR2 (255) ; 
/
create or replace trigger F15B3_App_AUD_trig 
before insert or update on F15B3_App 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE F15B3_AppCode_seq ; 
create sequence F15B3_AppCode_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger F15B3_AppCode_PK_trig 
before insert on F15B3_AppCode
for each row 
begin 
select F15B3_AppCode_seq.nextval into :new.appcode_id from dual; 
end; 
/
alter table F15B3_AppCode add created date ; 
alter table F15B3_AppCode add created_by VARCHAR2 (255) ; 
alter table F15B3_AppCode add row_version_number integer ; 
alter table F15B3_AppCode add updated date ; 
alter table F15B3_AppCode add updated_by VARCHAR2 (255) ; 
/
create or replace trigger F15B3_AppCode_AUD_trig 
before insert or update on F15B3_AppCode 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE F15B3_Auth_seq ; 
create sequence F15B3_Auth_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger F15B3_Auth_PK_trig 
before insert on F15B3_Auth
for each row 
begin 
select F15B3_Auth_seq.nextval into :new.auth_id from dual; 
end; 
/
alter table F15B3_Auth add created date ; 
alter table F15B3_Auth add created_by VARCHAR2 (255) ; 
alter table F15B3_Auth add row_version_number integer ; 
alter table F15B3_Auth add updated date ; 
alter table F15B3_Auth add updated_by VARCHAR2 (255) ; 
/
create or replace trigger F15B3_Auth_AUD_trig 
before insert or update on F15B3_Auth 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE F15B3_Comments_seq ; 
create sequence F15B3_Comments_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger F15B3_Comments_PK_trig 
before insert on F15B3_Comments
for each row 
begin 
select F15B3_Comments_seq.nextval into :new.comment_id from dual; 
end; 
/
alter table F15B3_Comments add created date ; 
alter table F15B3_Comments add created_by VARCHAR2 (255) ; 
alter table F15B3_Comments add row_version_number integer ; 
alter table F15B3_Comments add updated date ; 
alter table F15B3_Comments add updated_by VARCHAR2 (255) ; 
/
create or replace trigger F15B3_Comments_AUD_trig 
before insert or update on F15B3_Comments 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE F15B3_Doc_seq ; 
create sequence F15B3_Doc_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger F15B3_Doc_PK_trig 
before insert on F15B3_Doc
for each row 
begin 
select F15B3_Doc_seq.nextval into :new.doc_id from dual; 
end; 
/
alter table F15B3_Doc add created date ; 
alter table F15B3_Doc add created_by VARCHAR2 (255) ; 
alter table F15B3_Doc add row_version_number integer ; 
alter table F15B3_Doc add updated date ; 
alter table F15B3_Doc add updated_by VARCHAR2 (255) ; 
/
create or replace trigger F15B3_Doc_AUD_trig 
before insert or update on F15B3_Doc 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE F15B3_Emp_seq ; 
create sequence F15B3_Emp_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger F15B3_Emp_PK_trig 
before insert on F15B3_Emp
for each row 
begin 
select F15B3_Emp_seq.nextval into :new.emp_id from dual; 
end; 
/
alter table F15B3_Emp add created date ; 
alter table F15B3_Emp add created_by VARCHAR2 (255) ; 
alter table F15B3_Emp add row_version_number integer ; 
alter table F15B3_Emp add updated date ; 
alter table F15B3_Emp add updated_by VARCHAR2 (255) ; 
/
create or replace trigger F15B3_Emp_AUD_trig 
before insert or update on F15B3_Emp 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE F15B3_Lab_seq ; 
create sequence F15B3_Lab_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger F15B3_Lab_PK_trig 
before insert on F15B3_Lab
for each row 
begin 
select F15B3_Lab_seq.nextval into :new.lab_id from dual; 
end; 
/
alter table F15B3_Lab add created date ; 
alter table F15B3_Lab add created_by VARCHAR2 (255) ; 
alter table F15B3_Lab add row_version_number integer ; 
alter table F15B3_Lab add updated date ; 
alter table F15B3_Lab add updated_by VARCHAR2 (255) ; 
/
create or replace trigger F15B3_Lab_AUD_trig 
before insert or update on F15B3_Lab 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE F15B3_RFE_seq ; 
create sequence F15B3_RFE_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger F15B3_RFE_PK_trig 
before insert on F15B3_RFE
for each row 
begin 
select F15B3_RFE_seq.nextval into :new.rfe_id from dual; 
end; 
/
alter table F15B3_RFE add created date ; 
alter table F15B3_RFE add created_by VARCHAR2 (255) ; 
alter table F15B3_RFE add row_version_number integer ; 
alter table F15B3_RFE add updated date ; 
alter table F15B3_RFE add updated_by VARCHAR2 (255) ; 
/
create or replace trigger F15B3_RFE_AUD_trig 
before insert or update on F15B3_RFE 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE F15B3_RFETask_seq ; 
create sequence F15B3_RFETask_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger F15B3_RFETask_PK_trig 
before insert on F15B3_RFETask
for each row 
begin 
select F15B3_RFETask_seq.nextval into :new.rfetask_id from dual; 
end; 
/
alter table F15B3_RFETask add created date ; 
alter table F15B3_RFETask add created_by VARCHAR2 (255) ; 
alter table F15B3_RFETask add row_version_number integer ; 
alter table F15B3_RFETask add updated date ; 
alter table F15B3_RFETask add updated_by VARCHAR2 (255) ; 
/
create or replace trigger F15B3_RFETask_AUD_trig 
before insert or update on F15B3_RFETask 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE F15B3_Reviewer_seq ; 
create sequence F15B3_Reviewer_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger F15B3_Reviewer_PK_trig 
before insert on F15B3_Reviewer
for each row 
begin 
select F15B3_Reviewer_seq.nextval into :new.reviewer_id from dual; 
end; 
/
alter table F15B3_Reviewer add created date ; 
alter table F15B3_Reviewer add created_by VARCHAR2 (255) ; 
alter table F15B3_Reviewer add row_version_number integer ; 
alter table F15B3_Reviewer add updated date ; 
alter table F15B3_Reviewer add updated_by VARCHAR2 (255) ; 
/
create or replace trigger F15B3_Reviewer_AUD_trig 
before insert or update on F15B3_Reviewer 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE F15B3_StatHis_seq ; 
create sequence F15B3_StatHis_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger F15B3_StatHis_PK_trig 
before insert on F15B3_StatHis
for each row 
begin 
select F15B3_StatHis_seq.nextval into :new.hist_id from dual; 
end; 
/
alter table F15B3_StatHis add created date ; 
alter table F15B3_StatHis add created_by VARCHAR2 (255) ; 
alter table F15B3_StatHis add row_version_number integer ; 
alter table F15B3_StatHis add updated date ; 
alter table F15B3_StatHis add updated_by VARCHAR2 (255) ; 
/
create or replace trigger F15B3_StatHis_AUD_trig 
before insert or update on F15B3_StatHis 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE F15B3_Status_seq ; 
create sequence F15B3_Status_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger F15B3_Status_PK_trig 
before insert on F15B3_Status
for each row 
begin 
select F15B3_Status_seq.nextval into :new.status_id from dual; 
end; 
/
alter table F15B3_Status add created date ; 
alter table F15B3_Status add created_by VARCHAR2 (255) ; 
alter table F15B3_Status add row_version_number integer ; 
alter table F15B3_Status add updated date ; 
alter table F15B3_Status add updated_by VARCHAR2 (255) ; 
/
create or replace trigger F15B3_Status_AUD_trig 
before insert or update on F15B3_Status 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE F15B3_Task_seq ; 
create sequence F15B3_Task_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger F15B3_Task_PK_trig 
before insert on F15B3_Task
for each row 
begin 
select F15B3_Task_seq.nextval into :new.task_id from dual; 
end; 
/
alter table F15B3_Task add created date ; 
alter table F15B3_Task add created_by VARCHAR2 (255) ; 
alter table F15B3_Task add row_version_number integer ; 
alter table F15B3_Task add updated date ; 
alter table F15B3_Task add updated_by VARCHAR2 (255) ; 
/
create or replace trigger F15B3_Task_AUD_trig 
before insert or update on F15B3_Task 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP INDEX F15B3_AppCode_appcode__FK_0 ;
CREATE INDEX F15B3_AppCode_appcode__FK_0 ON F15B3_App(F15B3_AppCode_appcode_id) ;
DROP INDEX F15B3_Emp_emp_id_FK_1 ;
CREATE INDEX F15B3_Emp_emp_id_FK_1 ON F15B3_App(F15B3_Emp_emp_id) ;
DROP INDEX F15B3_RFE_rfe_id_FK_2 ;
CREATE INDEX F15B3_RFE_rfe_id_FK_2 ON F15B3_App(F15B3_RFE_rfe_id) ;
DROP INDEX F15B3_Emp_emp_id_FK_3 ;
CREATE INDEX F15B3_Emp_emp_id_FK_3 ON F15B3_Comments(F15B3_Emp_emp_id) ;
DROP INDEX F15B3_RFE_rfe_id_FK_4 ;
CREATE INDEX F15B3_RFE_rfe_id_FK_4 ON F15B3_Comments(F15B3_RFE_rfe_id) ;
DROP INDEX F15B3_RFE_rfe_id_FK_5 ;
CREATE INDEX F15B3_RFE_rfe_id_FK_5 ON F15B3_Doc(F15B3_RFE_rfe_id) ;
DROP INDEX F15B3_Auth_auth_id_FK_6 ;
CREATE INDEX F15B3_Auth_auth_id_FK_6 ON F15B3_Emp(F15B3_Auth_auth_id) ;
DROP INDEX F15B3_Lab_lab_id_FK_7 ;
CREATE INDEX F15B3_Lab_lab_id_FK_7 ON F15B3_Emp(F15B3_Lab_lab_id) ;
DROP INDEX F15B3_RFE_rfe_id_FK_8 ;
CREATE INDEX F15B3_RFE_rfe_id_FK_8 ON F15B3_RFETask(F15B3_RFE_rfe_id) ;
DROP INDEX F15B3_Task_task_id_FK_9 ;
CREATE INDEX F15B3_Task_task_id_FK_9 ON F15B3_RFETask(F15B3_Task_task_id) ;
DROP INDEX F15B3_Emp_emp_id_FK_10 ;
CREATE INDEX F15B3_Emp_emp_id_FK_10 ON F15B3_RFE(F15B3_Emp_emp_id) ;
DROP INDEX F15B3_Status_status_id_FK_11 ;
CREATE INDEX F15B3_Status_status_id_FK_11 ON F15B3_RFE(F15B3_Status_status_id) ;
DROP INDEX F15B3_Emp_emp_id_FK_12 ;
CREATE INDEX F15B3_Emp_emp_id_FK_12 ON F15B3_Reviewer(F15B3_Emp_emp_id) ;
DROP INDEX F15B3_RFE_rfe_id_FK_13 ;
CREATE INDEX F15B3_RFE_rfe_id_FK_13 ON F15B3_Reviewer(F15B3_RFE_rfe_id) ;
DROP INDEX F15B3_RFE_rfe_id_FK_14 ;
CREATE INDEX F15B3_RFE_rfe_id_FK_14 ON F15B3_StatHis(F15B3_RFE_rfe_id) ;
